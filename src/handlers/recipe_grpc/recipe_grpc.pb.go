// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: src/handlers/recipe_grpc/recipe.proto

package recipe_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecipeHandlerClient is the client API for RecipeHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecipeHandlerClient interface {
	GetRecipe(ctx context.Context, in *RecipeRequest, opts ...grpc.CallOption) (*Recipe, error)
}

type recipeHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipeHandlerClient(cc grpc.ClientConnInterface) RecipeHandlerClient {
	return &recipeHandlerClient{cc}
}

func (c *recipeHandlerClient) GetRecipe(ctx context.Context, in *RecipeRequest, opts ...grpc.CallOption) (*Recipe, error) {
	out := new(Recipe)
	err := c.cc.Invoke(ctx, "/RecipeHandler/GetRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipeHandlerServer is the server API for RecipeHandler service.
// All implementations must embed UnimplementedRecipeHandlerServer
// for forward compatibility
type RecipeHandlerServer interface {
	GetRecipe(context.Context, *RecipeRequest) (*Recipe, error)
	mustEmbedUnimplementedRecipeHandlerServer()
}

// UnimplementedRecipeHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedRecipeHandlerServer struct {
}

func (UnimplementedRecipeHandlerServer) GetRecipe(context.Context, *RecipeRequest) (*Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipe not implemented")
}
func (UnimplementedRecipeHandlerServer) mustEmbedUnimplementedRecipeHandlerServer() {}

// UnsafeRecipeHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipeHandlerServer will
// result in compilation errors.
type UnsafeRecipeHandlerServer interface {
	mustEmbedUnimplementedRecipeHandlerServer()
}

func RegisterRecipeHandlerServer(s grpc.ServiceRegistrar, srv RecipeHandlerServer) {
	s.RegisterService(&RecipeHandler_ServiceDesc, srv)
}

func _RecipeHandler_GetRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeHandlerServer).GetRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RecipeHandler/GetRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeHandlerServer).GetRecipe(ctx, req.(*RecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecipeHandler_ServiceDesc is the grpc.ServiceDesc for RecipeHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecipeHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RecipeHandler",
	HandlerType: (*RecipeHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecipe",
			Handler:    _RecipeHandler_GetRecipe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/handlers/recipe_grpc/recipe.proto",
}
